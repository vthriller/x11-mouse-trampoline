#!/usr/bin/env python
import PIL.ImageGrab
import PIL.ImageTk
from tkinter import Tk, Frame, Canvas, NW
import Xlib
import Xlib.display
from threading import Event
import signal
import os

SCALE = 4

# TODO: is there a way to reuse X handle from Tk, or to supply our own?
# (PyImaging_GrabScreenX11(), unfortunately, can only open and close its own connections)
display = Xlib.display.Display()
root = display.screen().root

window = Tk()
window.title('mouse trampoline (left click to jump, right click to cancel)')
window.resizable(False, False)

def jump(ev):
	root.warp_pointer(ev.x*SCALE, ev.y*SCALE)
	display.sync()

	window.quit()

frame = Frame()
frame.pack()

canvas = Canvas(frame,
	# some dummy sizes
	width = 64,
	height = 64,
)

activated = Event()
def wakeup(signum, frame):
	activated.set()
signal.signal(signal.SIGUSR1, wakeup)

print(f'PID is {os.getpid()}')

while True:
	while not activated.is_set():
		activated.wait(3600)

	img = PIL.ImageGrab.grab(xdisplay="").reduce(SCALE)
	tkimg = PIL.ImageTk.PhotoImage(img)

	canvas.config(width = img.size[0], height = img.size[1])
	canvas.create_image(0, 0, anchor=NW, image=tkimg)
	canvas.bind('<Button-1>', jump)
	canvas.bind('<Button-3>', lambda ev: window.quit())
	canvas.pack()

	pos = root.query_pointer()
	pos = (pos.root_x, pos.root_y)
	# shift window so that real cursor ends up over its position on a screenshot
	pos = (pos[0]-pos[0]//SCALE, pos[1]-pos[1]//SCALE)
	window.geometry(f'{pos[0]:+}{pos[1]:+}')

	window.deiconify() # show the window
	window.mainloop()
	window.withdraw() # hide the window

	activated.clear()
